import numpy as np

# frames per wavetable
m = 16
# size of each frame
n = 1024


w = np.linspace(0, 1.0, n, endpoint = False,dtype = np.float64)

wt = np.zeros(shape = (m,n))

# for i,v in enumerate(wt):
#     if i > 0:
#         p = i
#         wt[i] = np.sin(2 * np.pi * (np.exp(p*w) - 1.0)/(np.exp(p) - 1.0))
#     else:
#         wt[i] = np.sin(2 * np.pi * w)


# for i,v in enumerate(wt):
#     p = i * 0.5 + 0.5
#     wt[i] = np.sin(p * np.sin(2*np.pi * w) + 0.5)

# for i,v in enumerate(wt):
#     p = i * 0.15 + 0.5
#     wt[i] = np.sin(p * np.sin(2*np.pi*w + p * np.sin(2*np.pi*w)) + 0.5)

for i,v in enumerate(wt):
    p = (i/16)*4.3 + 0.68
    wt[i] = np.sin(np.pi * w) * np.sin(2*np.pi*p*w)



# remove DC
for i,v in enumerate(wt):
    wt[i] = wt[i] - np.average(wt[i])

# normalize
for i,v in enumerate(wt):
    wt[i] = wt[i] / np.max(np.abs(wt[i]))

with open("../src/instrument/wavetable_res.rs", "w") as f:
    f.write("// This file is autogenerated by scripts/wavetable.py.\n\n")
    f.write("const WT_SIZE: usize = " + str(n) + ";\n")
    f.write("const WT_MASK: usize = " + str(n-1) + ";\n")
    f.write("const WT_NUM: usize = " + str(m) + ";\n")
    f.write("#[rustfmt::skip] // Prevents rustfmt from hanging.\n")
    f.write("const WAVETABLE: [f32; " + str(n*m) + "] = [")
    for v in wt:
        i = 0
        for k in v:
            i -= 1
            if i <= 0:
                i = 4
                f.write("\n\t")
            f.write(f"{k: .12f}" + ", ")
        f.write("\n")
    f.write("];\n")
